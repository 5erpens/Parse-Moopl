/* Generated By:JavaCC: Do not edit this line. MooplParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MooplParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROC = 8;
  /** RegularExpression Id. */
  int FUN = 9;
  /** RegularExpression Id. */
  int CLASS = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int EXTENDS = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int ARRAYOF = 15;
  /** RegularExpression Id. */
  int BOOLEAN = 16;
  /** RegularExpression Id. */
  int INT = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int THEN = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int WHILE = 21;
  /** RegularExpression Id. */
  int DO = 22;
  /** RegularExpression Id. */
  int OUTPUT = 23;
  /** RegularExpression Id. */
  int LENGTH = 24;
  /** RegularExpression Id. */
  int SELF = 25;
  /** RegularExpression Id. */
  int NEW = 26;
  /** RegularExpression Id. */
  int OBJECT = 27;
  /** RegularExpression Id. */
  int ISNULL = 28;
  /** RegularExpression Id. */
  int AND = 29;
  /** RegularExpression Id. */
  int LESSTHAN = 30;
  /** RegularExpression Id. */
  int EQUALEQUAL = 31;
  /** RegularExpression Id. */
  int DIV = 32;
  /** RegularExpression Id. */
  int ADD = 33;
  /** RegularExpression Id. */
  int SUB = 34;
  /** RegularExpression Id. */
  int MULTI = 35;
  /** RegularExpression Id. */
  int OP = 36;
  /** RegularExpression Id. */
  int OPENCBA = 37;
  /** RegularExpression Id. */
  int CLOSECBA = 38;
  /** RegularExpression Id. */
  int OPENRBA = 39;
  /** RegularExpression Id. */
  int CLOSERBA = 40;
  /** RegularExpression Id. */
  int OPENSBA = 41;
  /** RegularExpression Id. */
  int CLOSESBA = 42;
  /** RegularExpression Id. */
  int SEMICOL = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int EQUAL = 45;
  /** RegularExpression Id. */
  int NOT = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 48;
  /** RegularExpression Id. */
  int ID = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "\"proc\"",
    "\"fun\"",
    "\"class\"",
    "\"true\"",
    "\"false\"",
    "\"extends\"",
    "\"return\"",
    "\"arrayof\"",
    "<BOOLEAN>",
    "<INT>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"output\"",
    "\"length\"",
    "\"self\"",
    "\"new\"",
    "\"object\"",
    "\"isnull\"",
    "\"&&\"",
    "\"<\"",
    "\"==\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "<OP>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\"!\"",
    "\".\"",
    "<INTEGER_LITERAL>",
    "<ID>",
  };

}
