proc test(int age, int salary, boolean married) {
   List l;
   l = new object List();
   output l.size();
   BigElement e;
   e = new object BigElement(1, 2, false);
   l.insert(e);
   e = new object BigElement(1, 2, true);
   l.insert(e);
   e = new object BigElement(1, 2, false);
   l.insert(e);
   e = new object BigElement(2, 3, true);
   l.insert(e);
   output l.size();
   output l.count(new object BigElement(age, salary, married));
}

proc varTest(int size) {
   List list;
   list = new object List();
   int n;
   n = 0;
   while (n < size) do {
      list.insert(new object BigElement(n, 2*n, (n div 2) == 0));
      n = n + 1;
   }
   output list.size();
}

class Element {

    int age;

    proc Element(int age_) {
        age = age_;
    }

    fun int getAge() {
        return age;
    }
}

class BigElement extends Element {

    int salary;
    boolean married;

    // initialize class variables
    proc BigElement(int v_age, int v_salary, boolean v_married) {
        self.Element(v_age); // initialising inherited age field
        salary = v_salary;
        married = v_married;
    }

    fun int getSalary() {
        return salary;
    }

    fun boolean getMarried() {
        return married;
    }

    // This method returns true if the object "other"
    // has the same values for age, salary and married
    fun boolean equals(BigElement other) {
        boolean result;
        result = (other.getAge()) == age;
        result = result and ((other.getSalary()) == salary);
        result = result and ((other.getMarried()) == married);
        return result;
    }
}

class List {

    BigElement elem;
    List next;
    boolean empty;

    // Initialize as an empty list
    proc List() {
        empty = true;
    }

    fun BigElement getElem() {
        return elem;
    }

    fun List getNext() {
        return next;
    }

    fun boolean isEmpty() {
        return empty;
    }

    proc insert(BigElement e) {
        List newNode;
        newNode = new object List();
        if (!empty) then {
            newNode.setElem(elem);
            newNode.setNext(next);
        } else {
        }
        elem = e;
        next = newNode;
        empty = false;
    }

    proc setElem(BigElement e) {
        elem = e;
        empty = false;
    }

    proc setNext(List l) {
        next = l;
        empty = false;
    }

    fun int size() {
        int n;
        n = 0;
        List rest;
        rest = self;
        while (!(rest.isEmpty())) do {
            n = n + 1;
            rest = rest.getNext();
        }
        return n;
    }

    fun int count(BigElement e) {
        List rest;
        rest = self;
        int count;
        count = 0;
        while (!(rest.isEmpty())) do {
            if (e.equals(rest.getElem())) then {
                count = count + 1;
            } else {}
            rest = rest.getNext();
        }
        return count;
    }

}
