/* Generated By:JavaCC: Do not edit this line. MooplParser.java */
  import syntaxtree.*;
  import syntaxtree.interp.*;
  import java.util.List;
  import java.util.LinkedList;
  public class MooplParser implements MooplParserConstants {

  final public void testTokens() throws ParseException {
  Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
      case FUN:
      case CLASS:
      case TRUE:
      case FALSE:
      case EXTENDS:
      case RETURN:
      case ARRAYOF:
      case BOOLEAN:
      case INT:
      case IF:
      case THEN:
      case ELSE:
      case WHILE:
      case DO:
      case OUTPUT:
      case LENGTH:
      case SELF:
      case NEW:
      case OBJECT:
      case ISNULL:
      case OP:
      case OPENCBA:
      case CLOSECBA:
      case OPENRBA:
      case CLOSERBA:
      case OPENSBA:
      case CLOSESBA:
      case SEMICOL:
      case COMMA:
      case EQUAL:
      case NOT:
      case DOT:
      case INTEGER_LITERAL:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
      case FUN:
      case CLASS:
      case TRUE:
      case FALSE:
      case EXTENDS:
      case RETURN:
      case ARRAYOF:
      case BOOLEAN:
      case INT:
      case IF:
      case THEN:
      case ELSE:
      case WHILE:
      case DO:
      case OUTPUT:
      case LENGTH:
      case SELF:
      case NEW:
      case OBJECT:
      case ISNULL:
      case OP:
      case OPENCBA:
      case CLOSECBA:
      case OPENRBA:
      case CLOSERBA:
      case OPENSBA:
      case CLOSESBA:
      case SEMICOL:
      case COMMA:
      case EQUAL:
      case NOT:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROC:
          t = jj_consume_token(PROC);
          break;
        case FUN:
          t = jj_consume_token(FUN);
          break;
        case CLASS:
          t = jj_consume_token(CLASS);
          break;
        case TRUE:
          t = jj_consume_token(TRUE);
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
          break;
        case EXTENDS:
          t = jj_consume_token(EXTENDS);
          break;
        case RETURN:
          t = jj_consume_token(RETURN);
          break;
        case ARRAYOF:
          t = jj_consume_token(ARRAYOF);
          break;
        case BOOLEAN:
          t = jj_consume_token(BOOLEAN);
          break;
        case INT:
          t = jj_consume_token(INT);
          break;
        case IF:
          t = jj_consume_token(IF);
          break;
        case THEN:
          t = jj_consume_token(THEN);
          break;
        case ELSE:
          t = jj_consume_token(ELSE);
          break;
        case WHILE:
          t = jj_consume_token(WHILE);
          break;
        case DO:
          t = jj_consume_token(DO);
          break;
        case OUTPUT:
          t = jj_consume_token(OUTPUT);
          break;
        case LENGTH:
          t = jj_consume_token(LENGTH);
          break;
        case SELF:
          t = jj_consume_token(SELF);
          break;
        case NEW:
          t = jj_consume_token(NEW);
          break;
        case OBJECT:
          t = jj_consume_token(OBJECT);
          break;
        case ISNULL:
          t = jj_consume_token(ISNULL);
          break;
        case OP:
          t = jj_consume_token(OP);
          break;
        case OPENCBA:
          t = jj_consume_token(OPENCBA);
          break;
        case CLOSECBA:
          t = jj_consume_token(CLOSECBA);
          break;
        case OPENRBA:
          t = jj_consume_token(OPENRBA);
          break;
        case CLOSERBA:
          t = jj_consume_token(CLOSERBA);
          break;
        case OPENSBA:
          t = jj_consume_token(OPENSBA);
          break;
        case CLOSESBA:
          t = jj_consume_token(CLOSESBA);
          break;
        case SEMICOL:
          t = jj_consume_token(SEMICOL);
          break;
        case COMMA:
          t = jj_consume_token(COMMA);
          break;
        case EQUAL:
          t = jj_consume_token(EQUAL);
          break;
        case NOT:
          t = jj_consume_token(NOT);
          break;
        case DOT:
          t = jj_consume_token(DOT);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        System.out.println("Recognised as valid token: " + t.image);
        break;
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
        System.out.println("Recognised as INTEGER_LITERAL: " + t.image);
        break;
      case ID:
        t = jj_consume_token(ID);
        System.out.println("Recognised as ID: " + t.image);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public Program nt_Program() throws ParseException {
  ClassDecl cd;
  ProcDecl pd;
  List<ProcDecl> l1 = new LinkedList<ProcDecl>();
  List<ClassDecl> l2 = new LinkedList<ClassDecl>();
    pd = nt_ProcDecl();
                    l1.add(pd);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      pd = nt_ProcDecl();
                                                       l1.add(pd);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      cd = nt_ClassDecl();
                                                                                           l2.add(cd);
    }
                                                                                                              {if (true) return new Program(l1,l2);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl nt_ClassDecl() throws ParseException {
  Token t1,t2;
  FieldDecl fd;
  MethodDecl md;
  List<FieldDecl> l1 = new LinkedList<FieldDecl>();
  List<MethodDecl> l2 = new LinkedList<MethodDecl>();
    if (jj_2_1(2)) {
      jj_consume_token(CLASS);
      t1 = jj_consume_token(ID);
      jj_consume_token(OPENCBA);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAYOF:
        case BOOLEAN:
        case INT:
        case ID:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        fd = nt_FieldDecl();
                                                 l1.add(fd);
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROC:
        case FUN:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        md = nt_MethodDecl();
                                                                                    l2.add(md);
      }
      jj_consume_token(CLOSECBA);
                                                                                                               {if (true) return new ClassDeclSimple(t1.image,l1,l2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);
        t1 = jj_consume_token(ID);
        jj_consume_token(EXTENDS);
        t2 = jj_consume_token(ID);
        jj_consume_token(OPENCBA);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARRAYOF:
          case BOOLEAN:
          case INT:
          case ID:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_6;
          }
          fd = nt_FieldDecl();
                                                                   l1.add(fd);
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROC:
          case FUN:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          md = nt_MethodDecl();
                                                                                                      l2.add(md);
        }
        jj_consume_token(CLOSECBA);
                                                                                                                                 {if (true) return new ClassDeclExtends(t1.image,t2.image,l1,l2);}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FieldDecl nt_FieldDecl() throws ParseException {
  Token t;
  Type ty;
    ty = nt_Type();
    t = jj_consume_token(ID);
    jj_consume_token(SEMICOL);
                                        {if (true) return new FieldDecl(ty,t.image);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl nt_MethodDecl() throws ParseException {
  ProcDecl pd;
  FunDecl fd;
  MethodDecl md;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROC:
      md = nt_ProcDecl();
                      {if (true) return md;}
      break;
    case FUN:
      md = nt_FunDecl();
                       {if (true) return md;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ProcDecl nt_ProcDecl() throws ParseException {
  Token t;
  Stm s;
  Formal f;
  List<Stm> l1 = new LinkedList<Stm>();
  List<Formal> l2 = new LinkedList<Formal>();
    jj_consume_token(PROC);
    t = jj_consume_token(ID);
    jj_consume_token(OPENRBA);
    l2 = nt_FormalList();
    jj_consume_token(CLOSERBA);
    jj_consume_token(OPENCBA);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case ARRAYOF:
      case BOOLEAN:
      case INT:
      case IF:
      case WHILE:
      case OUTPUT:
      case SELF:
      case NEW:
      case ISNULL:
      case OPENCBA:
      case OPENRBA:
      case NOT:
      case INTEGER_LITERAL:
      case ID:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      s = nt_Statement();
                                                                                       l1.add(s);
    }
    jj_consume_token(CLOSECBA);
                                                                                                                  {if (true) return new ProcDecl(t.image,l2,l1);}
    throw new Error("Missing return statement in function");
  }

  final public FunDecl nt_FunDecl() throws ParseException {
  Token t;
  Stm s;
  Type ty;
  Exp e;
  List<Stm> l1 = new LinkedList<Stm>();
  List<Formal> l2 = new LinkedList<Formal>();
    jj_consume_token(FUN);
    ty = nt_Type();
    t = jj_consume_token(ID);
    jj_consume_token(OPENRBA);
    l2 = nt_FormalList();
    jj_consume_token(CLOSERBA);
    jj_consume_token(OPENCBA);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case ARRAYOF:
      case BOOLEAN:
      case INT:
      case IF:
      case WHILE:
      case OUTPUT:
      case SELF:
      case NEW:
      case ISNULL:
      case OPENCBA:
      case OPENRBA:
      case NOT:
      case INTEGER_LITERAL:
      case ID:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      s = nt_Statement();
                                                                                                       l1.add(s);
    }
    jj_consume_token(RETURN);
    e = nt_Exp();
    jj_consume_token(SEMICOL);
    jj_consume_token(CLOSECBA);
                                                                                                                                                                   {if (true) return new FunDecl(ty, t.image,l2,l1, e);}
    throw new Error("Missing return statement in function");
  }

  final public List<Formal> nt_FormalList() throws ParseException {
  Type ty;
  Token t;
  List<Formal> l = new LinkedList<Formal>();
  Formal f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAYOF:
    case BOOLEAN:
    case INT:
    case ID:
      ty = nt_Type();
      t = jj_consume_token(ID);
                              l.add(new Formal(ty,t.image));
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
        f = nt_FormerRest();
                                                                                   l.add(f);
      }
                                                                                                  {if (true) return l;}
      break;
    default:
      jj_la1[14] = jj_gen;
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Formal nt_FormerRest() throws ParseException {
  Token t;
  Type ty;
    jj_consume_token(COMMA);
    ty = nt_Type();
    t = jj_consume_token(ID);
                                      {if (true) return new Formal(ty,t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Type nt_Type() throws ParseException {
  Token t;
  Type ty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAYOF:
      jj_consume_token(ARRAYOF);
      jj_consume_token(OPENRBA);
      ty = nt_Type();
      jj_consume_token(CLOSERBA);
                                                 {if (true) return new TypeArray(ty);}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
               {if (true) return new TypeBoolean();}
      break;
    case INT:
      jj_consume_token(INT);
            {if (true) return new TypeInt();}
      break;
    case ID:
      t = jj_consume_token(ID);
               {if (true) return new TypeClassType(t.image);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Stm nt_Statement() throws ParseException {
  Type ty;
  Var v;
  Exp e, e2, e3;
  Token t;
  List<Stm> ls = new LinkedList<Stm>();
  List<Stm> ls2 = new LinkedList<Stm>();
  List<Exp> le = new LinkedList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENCBA:
      ls = nt_Block();
                  {if (true) return new StmBlock(ls);}
      break;
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_2(2)) {
        ty = nt_Type();
        t = jj_consume_token(ID);
        jj_consume_token(SEMICOL);
                                         {if (true) return new StmVarDecl(ty,t.image);}
      } else if (jj_2_3(2)) {
        v = nt_Var();
        jj_consume_token(EQUAL);
        e = nt_Exp();
        jj_consume_token(SEMICOL);
                                                  {if (true) return new StmAssign(v,e);}
      } else if (jj_2_4(3)) {
        e = nt_PrimaryExp();
        jj_consume_token(OPENSBA);
        e2 = nt_Exp();
        jj_consume_token(CLOSESBA);
        jj_consume_token(EQUAL);
        e3 = nt_Exp();
        jj_consume_token(SEMICOL);
                                                                                                    {if (true) return new StmArrayAssign(e,e2,e3);}
      } else if (jj_2_5(3)) {
        e = nt_PrimaryExp();
        jj_consume_token(DOT);
        t = jj_consume_token(ID);
        jj_consume_token(OPENRBA);
        le = nt_ExpList();
        jj_consume_token(CLOSERBA);
        jj_consume_token(SEMICOL);
                                                                                                  {if (true) return new StmCall(e,t.image,le);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jj_consume_token(IF);
          jj_consume_token(OPENRBA);
          e = nt_Exp();
          jj_consume_token(CLOSERBA);
          jj_consume_token(THEN);
          ls = nt_Block();
          jj_consume_token(ELSE);
          ls2 = nt_Block();
                                                                                                   {if (true) return new StmIf(e,new StmBlock(ls),new StmBlock(ls2));}
          break;
        case WHILE:
          jj_consume_token(WHILE);
          jj_consume_token(OPENRBA);
          e = nt_Exp();
          jj_consume_token(CLOSERBA);
          jj_consume_token(DO);
          ls = nt_Block();
                                                                          {if (true) return new StmWhile(e, new StmBlock(ls));}
          break;
        case OUTPUT:
          jj_consume_token(OUTPUT);
          e = nt_Exp();
          jj_consume_token(SEMICOL);
                                          {if (true) return new StmOutput(e);}
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Stm> nt_Block() throws ParseException {
  Stm s;
  List<Stm> ls= new LinkedList<Stm>();
    jj_consume_token(OPENCBA);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case ARRAYOF:
      case BOOLEAN:
      case INT:
      case IF:
      case WHILE:
      case OUTPUT:
      case SELF:
      case NEW:
      case ISNULL:
      case OPENCBA:
      case OPENRBA:
      case NOT:
      case INTEGER_LITERAL:
      case ID:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      s = nt_Statement();
                               ls.add(s);
    }
    jj_consume_token(CLOSECBA);
                                                          {if (true) return ls;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_Exp() throws ParseException {
  Exp e1, e2;
  Token t, t2;
  List<Exp> le = new LinkedList<Exp>();
    if (jj_2_6(3)) {
      e1 = nt_PrimaryExp();
      t2 = jj_consume_token(OP);
      e2 = nt_PrimaryExp();
                                                                 {if (true) return new ExpOp(e1, ExpOp.Op.valueOf(t2.image), e2);}
    } else if (jj_2_7(3)) {
      e1 = nt_PrimaryExp();
      jj_consume_token(OPENSBA);
      e2 = nt_Exp();
      jj_consume_token(CLOSESBA);
                                                                   {if (true) return new ExpArrayLookup(e1, e2);}
    } else if (jj_2_8(3)) {
      e1 = nt_PrimaryExp();
      jj_consume_token(DOT);
      jj_consume_token(LENGTH);
                                             {if (true) return new ExpArrayLength(e1);}
    } else if (jj_2_9(3)) {
      e1 = nt_PrimaryExp();
      jj_consume_token(DOT);
      t = jj_consume_token(ID);
      jj_consume_token(OPENRBA);
      le = nt_ExpList();
      jj_consume_token(CLOSERBA);
                                                                                        {if (true) return new ExpCall(e1, t.image, le);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case SELF:
      case NEW:
      case ISNULL:
      case OPENRBA:
      case NOT:
      case INTEGER_LITERAL:
      case ID:
        nt_PrimaryExp();

        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_PrimaryExp() throws ParseException {
  Var v;
  Token t;
  Exp e;
  Type ty;
  List<Exp> le = new LinkedList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                         {if (true) return new ExpInteger(Integer.parseInt(t.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
             {if (true) return new ExpTrue() ;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
              {if (true) return new ExpFalse() ;}
      break;
    case ID:
      v = nt_Var();
                  {if (true) return new ExpVar(v);}
      break;
    case SELF:
      jj_consume_token(SELF);
             {if (true) return new ExpSelf();}
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_10(2)) {
        jj_consume_token(NEW);
        jj_consume_token(ARRAYOF);
        jj_consume_token(OPENRBA);
        ty = nt_Type();
        jj_consume_token(CLOSERBA);
        jj_consume_token(OPENSBA);
        e = nt_Exp();
        jj_consume_token(CLOSESBA);
                                                                                                 {if (true) return new ExpNewArray(ty, e);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          jj_consume_token(OBJECT);
          t = jj_consume_token(ID);
          jj_consume_token(OPENRBA);
          le = nt_ExpList();
          jj_consume_token(CLOSERBA);
                                                                           {if (true) return new ExpNewObject(t.image, le);}
          break;
        case NOT:
          jj_consume_token(NOT);
          e = nt_PrimaryExp();
                                    {if (true) return new ExpNot(e);}
          break;
        case ISNULL:
          jj_consume_token(ISNULL);
          e = nt_PrimaryExp();
                                      {if (true) return new ExpIsnull(e);}
          break;
        case OPENRBA:
          jj_consume_token(OPENRBA);
          nt_Exp();
          jj_consume_token(CLOSERBA);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Var nt_Var() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
           {if (true) return new Var(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public List<Exp> nt_ExpList() throws ParseException {
  Exp e;
  List<Exp> le = new LinkedList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case SELF:
    case NEW:
    case ISNULL:
    case OPENRBA:
    case NOT:
    case INTEGER_LITERAL:
    case ID:
      e = nt_Exp();
                 le.add(e);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_12;
        }
        e = nt_ExpRest();
                                              le.add(e);
      }
                                                              {if (true) return le;}
      break;
    default:
      jj_la1[23] = jj_gen;
     {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_ExpRest() throws ParseException {
  Exp e;
    jj_consume_token(COMMA);
    e = nt_Exp();
                             {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public void eof() throws ParseException {
    jj_consume_token(0);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(OPENSBA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(OP)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(ARRAYOF)) return true;
    if (jj_scan_token(OPENRBA)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(OPENRBA)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(CLOSERBA)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(ISNULL)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(OBJECT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ARRAYOF)) return true;
    if (jj_scan_token(OPENRBA)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(SELF)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(OPENSBA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MooplParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff00,0xffffff00,0xffffff00,0x100,0x400,0x38000,0x300,0x38000,0x300,0x400,0x300,0x56a79800,0x56a79800,0x0,0x38000,0x38000,0x40000000,0xa40000,0x56a79800,0x16001800,0x2001800,0x14000000,0x0,0x16001800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7ff,0x1ff,0x7ff,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x681,0x681,0x20,0x400,0x400,0x0,0x0,0x681,0x681,0x600,0x81,0x20,0x681,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MooplParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MooplParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MooplParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MooplParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MooplParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MooplParser(MooplParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MooplParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
