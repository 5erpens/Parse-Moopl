/* Generated By:JavaCC: Do not edit this line. MooplParser.java */
  import syntaxtree.*;
  import syntaxtree.interp.*;
  import java.util.List;
  import java.util.LinkedList;
  public class MooplParser implements MooplParserConstants {
    private <T extends AST> T tag(T ast, Token t) {
      ast.tag(t.beginLine, t.beginColumn);
      return ast;
    }
    private <T extends AST> T tag(T ast, AST sub) {
        ast.tag(sub.getTags());
        return ast;
    }

/*
TOKEN : // INTERPRETER COMMAND WORDS
{
  < I_QUIT: ":quit" >
| < I_CALL: ":call" >
| < I_EVAL: ":eval" >
}
*/

/***************************************************
 * This section is the interpreter command grammar *
 ***************************************************/
  final public ICommand nt_ICommand() throws ParseException {
  Token t;
  List<Exp> es;
  Exp e;
  Stm s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      t = jj_consume_token(ID);
      jj_consume_token(LPAREN);
      es = nt_ExpList();
      jj_consume_token(RPAREN);
                                                     {if (true) return new ICall(t.image, es);}
      break;
    case 50:
      jj_consume_token(50);
      e = nt_Exp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                              {if (true) return new IEval(e);}
      break;
    case 51:
      jj_consume_token(51);
            {if (true) return new IQuit();}
      break;
    case 0:
      jj_consume_token(0);
          {if (true) return new IQuit();}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void endOfFile() throws ParseException {
    jj_consume_token(0);
  }

  final public Program nt_Program() throws ParseException {
  ProcDecl pd;
  List<ProcDecl> pds = new LinkedList<ProcDecl>();
  ClassDecl cd;
  List<ClassDecl> cds = new LinkedList<ClassDecl>();
    label_1:
    while (true) {
      pd = nt_ProcDecl();
                      pds.add(pd);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      cd = nt_ClassDecl();
                                                            cds.add(cd);
    }
    jj_consume_token(0);
    {if (true) return new Program(pds, cds);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl nt_ClassDecl() throws ParseException {
  Token t1;
  Token t2 = null;
  FieldDecl fd;
  List<FieldDecl> fds = new LinkedList<FieldDecl>();
  MethodDecl md;
  List<MethodDecl> mds = new LinkedList<MethodDecl>();
    jj_consume_token(CLASS);
    t1 = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      t2 = jj_consume_token(ID);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAYOF:
      case INT:
      case BOOLEAN:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      fd = nt_FieldDecl();
                               fds.add(fd);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
      case FUN:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      md = nt_MethodDecl();
                                                                      mds.add(md);
    }
    jj_consume_token(RBRACE);
    ClassDecl cd;
    if (t2 == null) {
      cd = new ClassDeclSimple(t1.image, fds, mds);
    } else {
      cd = new ClassDeclExtends(t1.image, t2.image, fds, mds);
    }
    {if (true) return tag(cd, t1);}
    throw new Error("Missing return statement in function");
  }

  final public FieldDecl nt_FieldDecl() throws ParseException {
  Type type;
  Token t;
    type = nt_Type();
    t = jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    {if (true) return tag(new FieldDecl(type, t.image), t);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl nt_MethodDecl() throws ParseException {
  MethodDecl md;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROC:
      md = nt_ProcDecl();
      {if (true) return md;}
      break;
    case FUN:
      md = nt_FunDecl();
      {if (true) return md;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FunDecl nt_FunDecl() throws ParseException {
  Type type;
  Token t;
  List<Formal> fs;
  Stm s;
  List<Stm> ss = new LinkedList<Stm>();
  Exp re;
    jj_consume_token(FUN);
    type = nt_Type();
    t = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    fs = nt_FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case LPAREN:
      case NEW:
      case SELF:
      case ARRAYOF:
      case INT:
      case TRUE:
      case FALSE:
      case NOT:
      case ISNULL:
      case LBRACE:
      case BOOLEAN:
      case IF:
      case WHILE:
      case OUTPUT:
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      s = nt_Statement();
                        ss.add(s);
    }
    jj_consume_token(RETURN);
    re = nt_Exp();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
    {if (true) return tag(new FunDecl(type, t.image, fs, ss, re), t);}
    throw new Error("Missing return statement in function");
  }

  final public ProcDecl nt_ProcDecl() throws ParseException {
  Token t;
  List<Formal> fs;
  Stm s;
  List<Stm> ss = new LinkedList<Stm>();
  Exp re;
    jj_consume_token(PROC);
    t = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    fs = nt_FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case LPAREN:
      case NEW:
      case SELF:
      case ARRAYOF:
      case INT:
      case TRUE:
      case FALSE:
      case NOT:
      case ISNULL:
      case LBRACE:
      case BOOLEAN:
      case IF:
      case WHILE:
      case OUTPUT:
      case ID:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      s = nt_Statement();
                        ss.add(s);
    }
    jj_consume_token(RBRACE);
    {if (true) return tag(new ProcDecl(t.image, fs, ss), t);}
    throw new Error("Missing return statement in function");
  }

  final public List<Formal> nt_FormalList() throws ParseException {
  Formal f;
  List<Formal> fs = new LinkedList<Formal>();
  Type type;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAYOF:
    case INT:
    case BOOLEAN:
    case ID:
      type = nt_Type();
      t = jj_consume_token(ID);
      f = new Formal(type, t.image); fs.add(tag(f, t));
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        f = nt_FormalRest();
                         fs.add(f);
      }
      {if (true) return fs;}
      break;
    default:
      jj_la1[11] = jj_gen;

      {if (true) return fs;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Formal nt_FormalRest() throws ParseException {
  Token t;
  Type type;
    jj_consume_token(COMMA);
    type = nt_Type();
    t = jj_consume_token(ID);
    {if (true) return tag(new Formal(type, t.image), t);}
    throw new Error("Missing return statement in function");
  }

  final public Type nt_Type() throws ParseException {
  Token t;
  Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAYOF:
      t = jj_consume_token(ARRAYOF);
      jj_consume_token(LPAREN);
      type = nt_Type();
      jj_consume_token(RPAREN);
      type = new TypeArray(type); tag(type, t); {if (true) return type;}
      break;
    case INT:
      t = jj_consume_token(INT);
      type = new TypeInt(); tag(type, t); {if (true) return type;}
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      type = new TypeBoolean(); tag(type, t); {if (true) return type;}
      break;
    case ID:
      t = jj_consume_token(ID);
      type = new TypeClassType(t.image); tag(type, t); {if (true) return type;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StmBlock nt_Block() throws ParseException {
  Stm s;
  List<Stm> ss = new LinkedList<Stm>();
    jj_consume_token(LBRACE);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case LPAREN:
      case NEW:
      case SELF:
      case ARRAYOF:
      case INT:
      case TRUE:
      case FALSE:
      case NOT:
      case ISNULL:
      case LBRACE:
      case BOOLEAN:
      case IF:
      case WHILE:
      case OUTPUT:
      case ID:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      s = nt_Statement();
                                ss.add(s);
    }
    jj_consume_token(RBRACE);
    {if (true) return new StmBlock(ss);}
    throw new Error("Missing return statement in function");
  }

  final public Stm nt_Statement() throws ParseException {
  StmBlock b, b1, b2;
  List<Exp> es = new LinkedList<Exp>();
  Exp e, e1, e2;
  Type type;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      b = nt_Block();
      {if (true) return b;}
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_1(2)) {
        type = nt_Type();
        t = jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
      StmVarDecl svd = new StmVarDecl(type, t.image); tag(svd, t); {if (true) return svd;}
      } else if (jj_2_2(2)) {
        t = jj_consume_token(ID);
        jj_consume_token(ASSIGN);
        e = nt_Exp();
        jj_consume_token(SEMICOLON);
      Var v = new Var(t.image); tag(v, t); {if (true) return new StmAssign(v, e);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
          e = nt_Exp();
          jj_consume_token(RPAREN);
          jj_consume_token(THEN);
          b1 = nt_Block();
          jj_consume_token(ELSE);
          b2 = nt_Block();
      {if (true) return new StmIf(e, b1, b2);}
          break;
        case WHILE:
          jj_consume_token(WHILE);
          jj_consume_token(LPAREN);
          e = nt_Exp();
          jj_consume_token(RPAREN);
          jj_consume_token(DO);
          b = nt_Block();
      {if (true) return new StmWhile(e, b);}
          break;
        case OUTPUT:
          jj_consume_token(OUTPUT);
          e = nt_Exp();
          jj_consume_token(SEMICOLON);
      {if (true) return new StmOutput(e);}
          break;
        case INTEGER_LITERAL:
        case LPAREN:
        case NEW:
        case SELF:
        case TRUE:
        case FALSE:
        case NOT:
        case ISNULL:
        case ID:
          e = nt_PrimaryExp();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSQBR:
            jj_consume_token(LSQBR);
            e1 = nt_Exp();
            jj_consume_token(RSQBR);
            jj_consume_token(ASSIGN);
            e2 = nt_Exp();
            jj_consume_token(SEMICOLON);
         {if (true) return new StmArrayAssign(e, e1, e2);}
            break;
          case DOT:
            jj_consume_token(DOT);
            t = jj_consume_token(ID);
            jj_consume_token(LPAREN);
            es = nt_ExpList();
            jj_consume_token(RPAREN);
            jj_consume_token(SEMICOLON);
         {if (true) return tag(new StmCall(e, t.image, es), t);}
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_Exp() throws ParseException {
  Token t;
  Exp e1, e2;
  ExpOp.Op op;
  List<Exp> es;
    e1 = nt_PrimaryExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case LT:
    case EQUALS:
    case DIV:
    case PLUS:
    case MINUS:
    case MULT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case EQUALS:
        t = jj_consume_token(EQUALS);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case MULT:
        t = jj_consume_token(MULT);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = nt_PrimaryExp();
          if (t.image.equals("and")) {
            op = ExpOp.Op.AND;
          } else if (t.image.equals("<")) {
            op = ExpOp.Op.LESSTHAN;
          } else if (t.image.equals("==")) {
            op = ExpOp.Op.EQUALS;
          } else if (t.image.equals("+")) {
            op = ExpOp.Op.PLUS;
          } else if (t.image.equals("div")) {
            op = ExpOp.Op.DIV;
          } else if (t.image.equals("-")) {
            op = ExpOp.Op.MINUS;
          } else if (t.image.equals("*")) {
            op = ExpOp.Op.TIMES;
          } else {
            {if (true) throw new Error("unexpected operator symbol: " + t.image);}
          }
          {if (true) return tag(new ExpOp(e1, op, e2), e1);}
      break;
    case LSQBR:
      t = jj_consume_token(LSQBR);
      e2 = nt_Exp();
      jj_consume_token(RSQBR);
          {if (true) return tag(new ExpArrayLookup(e1, e2), e1);}
      break;
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_3(2)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
          {if (true) return tag(new ExpArrayLength(e1), e1);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          t = jj_consume_token(ID);
          jj_consume_token(LPAREN);
          es = nt_ExpList();
          jj_consume_token(RPAREN);
          {if (true) return tag(new ExpCall(e1, t.image, es), t);}
          break;
        default:
          jj_la1[19] = jj_gen;

          {if (true) return e1;}
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_PrimaryExp() throws ParseException {
  Token t, t1;
  Exp e;
  List<Exp> es;
  Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      {if (true) return tag(new ExpInteger(Integer.parseInt(t.image)), t);}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
      {if (true) return tag(new ExpTrue(), t);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      {if (true) return tag(new ExpFalse(), t);}
      break;
    case ID:
      t = jj_consume_token(ID);
      {if (true) return tag(new ExpVar(tag(new Var(t.image), t)), t);}
      break;
    case SELF:
      t = jj_consume_token(SELF);
      {if (true) return tag(new ExpSelf(), t);}
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_4(2)) {
        t = jj_consume_token(NEW);
        jj_consume_token(ARRAYOF);
        jj_consume_token(LPAREN);
        type = nt_Type();
        jj_consume_token(RPAREN);
        jj_consume_token(LSQBR);
        e = nt_Exp();
        jj_consume_token(RSQBR);
      {if (true) return tag(new ExpNewArray(type,e), t);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          t1 = jj_consume_token(NEW);
          jj_consume_token(OBJECT);
          t = jj_consume_token(ID);
          jj_consume_token(LPAREN);
          es = nt_ExpList();
          jj_consume_token(RPAREN);
      {if (true) return tag(new ExpNewObject(t.image, es), t);}
          break;
        case NOT:
          t = jj_consume_token(NOT);
          e = nt_PrimaryExp();
      {if (true) return tag(new ExpNot(e), t);}
          break;
        case ISNULL:
          t = jj_consume_token(ISNULL);
          e = nt_PrimaryExp();
      {if (true) return tag(new ExpIsnull(e), t);}
          break;
        case LPAREN:
          t = jj_consume_token(LPAREN);
          e = nt_Exp();
          jj_consume_token(RPAREN);
      {if (true) return e;}
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Exp> nt_ExpList() throws ParseException {
  Exp e;
  List<Exp> es = new LinkedList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case LPAREN:
    case NEW:
    case SELF:
    case TRUE:
    case FALSE:
    case NOT:
    case ISNULL:
    case ID:
      e = nt_Exp();
                   es.add(e);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        e = nt_ExpRest();
                                                   es.add(e);
      }
      {if (true) return es;}
      break;
    default:
      jj_la1[23] = jj_gen;

         {if (true) return es;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nt_ExpRest() throws ParseException {
  Exp e;
    jj_consume_token(COMMA);
    e = nt_Exp();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(ARRAYOF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ARRAYOF)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MooplParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000001,0x1,0x4000,0x0,0x0,0x30000,0xc000,0xc000,0x13f2b00,0x13f2b00,0x0,0x30000,0x30000,0x13f2b00,0x8400000,0x1000000,0x3c2b00,0xe0000000,0xe0400000,0x8000000,0xc2100,0x300a00,0x0,0x3c2b00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xe0000,0x0,0x40,0x200,0x10020,0x0,0x0,0x12c20,0x12c20,0x10,0x10020,0x10020,0x12c20,0x0,0x0,0x12c00,0xf,0xf,0x0,0x10000,0x0,0x10,0x10000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MooplParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MooplParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MooplParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MooplParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MooplParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MooplParser(MooplParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MooplParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
